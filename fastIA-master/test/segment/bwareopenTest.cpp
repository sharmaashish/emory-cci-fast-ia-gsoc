#define BOOST_TEST_MAIN
#define BOOST_TEST_DYN_LINK

#include <boost/test/unit_test.hpp>
#include "TestUtils.h"

#include "opencv2/opencv.hpp"
#include <iostream>
#include <dirent.h>
#include <vector>
#include <errno.h>
#include <time.h>
#include "MorphologicOperations.h"
#include "Logger.h"
#include <stdio.h>
#include "PixelOperations.h"
#include "UtilsCVImageIO.h"
#include "ConnComponents.h"
#if defined (WITH_CUDA)
#include "opencv2/gpu/stream_accessor.hpp"

#include "opencv2/gpu/gpu.hpp"
#include "ccl_uf.cuh"
#endif

using namespace cv;

BOOST_AUTO_TEST_CASE(test1)
{   
    uint64_t t1, t2;
	std::vector<int> stages;
	for (int stage = 0; stage <= 200; ++stage) {
		stages.push_back(stage);
	}

    std::string prefix;
    //prefix.assign("test/out-bwareaopen-test-");
    prefix.assign(DATA_OUT("out-bwareaopen-test-"));
    
    std::string suffix;
    //suffix.assign(".pbm");
    suffix.assign(".png");
    ::cciutils::cv::IntermediateResultHandler *iwrite = new ::cciutils::cv::IntermediateResultWriter(prefix, suffix, stages);


	std::vector<std::string> segfiles;
	//segfiles.push_back(std::string("/home/tcpan/PhD/path/src/nscale/src/segment/test/sizePhantom.ppm"));
    
    segfiles.push_back(DATA_IN("sizePhantom.png"));
    
/*	segfiles.push_back(std::string("/home/tcpan/PhD/path/Data/seg-validate-cpu/astroII.1/astroII.1.ndpi-0000008192-0000008192-7.mask.pbm"));
	segfiles.push_back(std::string("/home/tcpan/PhD/path/Data/seg-validate-cpu/gbm2.1/gbm2.1.ndpi-0000004096-0000004096-7.mask.pbm"));
	segfiles.push_back(std::string("/home/tcpan/PhD/path/Data/seg-validate-cpu/normal.3/normal.3.ndpi-0000028672-0000012288-7.mask.pbm"));
	segfiles.push_back(std::string("/home/tcpan/PhD/path/Data/seg-validate-cpu/oligoastroIII.1/oligoastroIII.1.ndpi-0000053248-0000008192-7.mask.pbm"));
	segfiles.push_back(std::string("/home/tcpan/PhD/path/Data/seg-validate-cpu/oligoIII.1/oligoIII.1.ndpi-0000012288-0000028672-7.mask.pbm"));
*/
	for (int i = 0; i < segfiles.size(); ++i ) {

        //Mat imfilldata = imread("test/text.png", 0) > 0;
        //maskb = repeat(imfilldata, 16, 16);
        printf("file: %s\n", segfiles[i].c_str());
        Mat mask = imread(segfiles[i].c_str(), 0);
        if (! mask.data) {
            printf("CAN't READ FILE: %s \n", segfiles[i].c_str());
            BOOST_FAIL("CAN't READ FILE");
            //return -1;
        }
        Mat maskb = mask > 0;
        int count = 0;
    
        // bwareaopen testing
        t1 = cci::common::event::timestampInUS();
        Mat bwareaopen = nscale::bwareaopen<unsigned char>(maskb, 100, 500, 8, count);
        t2 = cci::common::event::timestampInUS();
        std::cout << "bwareaopen mid took " << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(bwareaopen, 1);
        t1 = cci::common::event::timestampInUS();
        bwareaopen = nscale::bwareaopen<unsigned char>(maskb, 1, 100, 8, count);
        t2 = cci::common::event::timestampInUS();
        std::cout << "bwareaopen small took " << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(bwareaopen, 2);
        t1 = cci::common::event::timestampInUS();
        bwareaopen = nscale::bwareaopen<unsigned char>(maskb, 500, std::numeric_limits<int>::max(), 8, count);
        t2 = cci::common::event::timestampInUS();
        std::cout << "bwareaopen large took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(bwareaopen, 3);
    
        t1 = cci::common::event::timestampInUS();
        bwareaopen = nscale::bwareaopen<unsigned char>(maskb, 11, 1000, 8, count);
        t2 = cci::common::event::timestampInUS();
        std::cout << "bwareaopen 11-1000 took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(bwareaopen, 4);
    
    
        // bwareaopen testing
        t1 = cci::common::event::timestampInUS();
        Mat bwareaopen2 = nscale::bwareaopen3(maskb, true, 100, 500, 8, count);
        t2 = cci::common::event::timestampInUS();
        std::cout << "bwareaopen2 mid took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(bwareaopen2, 11);
    
        t1 = cci::common::event::timestampInUS();
        bwareaopen2 = nscale::bwareaopen3(maskb, true, 1, 100, 8, count);
        t2 = cci::common::event::timestampInUS();
        std::cout << "bwareaopen2 small took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(bwareaopen2, 12);
    
        t1 = cci::common::event::timestampInUS();
        bwareaopen2 = nscale::bwareaopen3(maskb, true, 500, std::numeric_limits<int>::max(), 8, count);
        t2 = cci::common::event::timestampInUS();
        std::cout << "bwareaopen2 large took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(bwareaopen2, 13);
    
    
        t1 = cci::common::event::timestampInUS();
        bwareaopen2 = nscale::bwareaopen3(maskb, true, 11, 1000, 8, count);
        t2 = cci::common::event::timestampInUS();
        std::cout << "bwareaopen2 11-1000 took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(bwareaopen2, 14);
    
    
        // bwareaopen using ccl and post proc. testing
        //copy, to make data continuous.
    
        t1 = cci::common::event::timestampInUS();
        bwareaopen2 = nscale::bwareaopen2(maskb, false, true, 100, 500, 8, count);
                t2 = cci::common::event::timestampInUS();
        std::cout << "bwareaopen with CCL and post proc mid took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(bwareaopen2, 21);
    
        t1 = cci::common::event::timestampInUS();
        bwareaopen2 = nscale::bwareaopen2(maskb, false, true, 1, 100, 8, count);
                t2 = cci::common::event::timestampInUS();
        std::cout << "bwareaopen with CCL and post proc small took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(bwareaopen2, 22);
    
        t1 = cci::common::event::timestampInUS();
        bwareaopen2 = nscale::bwareaopen2(maskb, false, true, 500, std::numeric_limits<int>::max(), 8, count);
                t2 = cci::common::event::timestampInUS();
        std::cout << "bwareaopen2 with CCL and post proc large took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(bwareaopen2, 23);
    
        t1 = cci::common::event::timestampInUS();
        bwareaopen2 = nscale::bwareaopen2(maskb, false, true, 11, 1000, 8, count);
                t2 = cci::common::event::timestampInUS();
        std::cout << "bwareaopen2 with CCL and post proc 11-1000 took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(bwareaopen2, 24);
        
            
#if defined (WITH_CUDA)
        // gpu version of watershed
        Stream stream;
        GpuMat g_maskb = createContinuous(mask.size(), mask.type());
        stream.enqueueUpload(maskb, g_maskb);
        stream.waitForCompletion();
        std::cout << "finished uploading" << std::endl;
    
        t1 = cci::common::event::timestampInUS();
        GpuMat g_bwareaopen = nscale::gpu::bwareaopen(g_maskb, false, true, 100, 500, 8, count, stream);
        t2 = cci::common::event::timestampInUS();
        std::cout << "gpu bwareaopen mid took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(g_bwareaopen, 51);
    
        t1 = cci::common::event::timestampInUS();
        g_bwareaopen = nscale::gpu::bwareaopen(g_maskb, false, true, 1, 100, 8, count, stream);
        t2 = cci::common::event::timestampInUS();
        std::cout << "gpu bwareaopen small took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(g_bwareaopen, 52);
    
        t1 = cci::common::event::timestampInUS();
        g_bwareaopen = nscale::gpu::bwareaopen(g_maskb, false, true, 500, std::numeric_limits<int>::max(), 8, count, stream);
        t2 = cci::common::event::timestampInUS();
        std::cout << "gpu bwareaopen large took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(g_bwareaopen, 53);
    
        t1 = cci::common::event::timestampInUS();
        g_bwareaopen = nscale::gpu::bwareaopen(g_maskb, false, true, 11, 1000, 8, count, stream);
        t2 = cci::common::event::timestampInUS();
        std::cout << "gpu bwareaopen 11-1000 took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(g_bwareaopen, 54);
    
        t1 = cci::common::event::timestampInUS();
        g_bwareaopen = nscale::gpu::bwareaopen2(g_maskb, false, true, 100, 500, 8, count, stream);
        t2 = cci::common::event::timestampInUS();
        std::cout << "gpu bwareaopen2 mid took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(g_bwareaopen, 61);
    
        t1 = cci::common::event::timestampInUS();
        g_bwareaopen = nscale::gpu::bwareaopen2(g_maskb, false, true, 1, 100, 8, count, stream);
        t2 = cci::common::event::timestampInUS();
        std::cout << "gpu bwareaopen2 small took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(g_bwareaopen, 62);
    
        t1 = cci::common::event::timestampInUS();
        g_bwareaopen = nscale::gpu::bwareaopen2(g_maskb, false, true, 500, std::numeric_limits<int>::max(), 8, count, stream);
        t2 = cci::common::event::timestampInUS();
        std::cout << "gpu bwareaopen2 large took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(g_bwareaopen, 63);
    
        t1 = cci::common::event::timestampInUS();
        g_bwareaopen = nscale::gpu::bwareaopen2(g_maskb, false, true, 11, 1000, 8, count, stream);
        t2 = cci::common::event::timestampInUS();
        std::cout << "gpu bwareaopen2 11-1000 took "  << count << " " << t2-t1 << "ms" << std::endl;
        iwrite->saveIntermediate(g_bwareaopen, 64);
#endif
        
        
    }
}

